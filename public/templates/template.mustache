##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout

print('Loading...')
pdb = PDBFile('{{general.coords_fn}}')
forcefield = ForceField('{{general.protein}}'{{#general.explicit_water}}, '{{general.water}}'{{/general.explicit_water}})

system = forcefield.createSystem(pdb.topology, nonbondedMethod = {{system.nb_method}},
    {{#system.has_cutoff}}nonbondedCutoff = {{system.nb_cutoff}},{{/system.has_cutoff}} constraints = {{system.constraints}}, rigidWater = {{system.rigid_water}})
integrator = {{integrator.kind}}Integrator({{#integrator.stochastic_active}}{{integrator.temperature}}, {{integrator.friction}}, {{/integrator.stochastic_active}}{{integrator.timestep}})

platform = Platform.getPlatformByName('{{general.platform}}')

simulation = Simulation(pdb.topology, system, integrator, platform)
simulation.context.setPositions(pdb.positions){{#simulation.minimize}}
simulation.minimizeEnergy(maxIterations = {{simulation.minimize_iters}}){{/simulation.minimize}}

print('Starting'){{#simulation.dcd_reporter}}
simulation.reporters.append(DCDReporter('{{simulation.dcd_file}}', {{simulation.dcd_freq}})){{/simulation.dcd_reporter}}{{#simulation.statedata_reporter}}
simulation.reporters.append(StateDataReporter(stdout, {{simulation.statedata_freq}}, step = True,
    potentialEnergy = True, temperature = True)){{/simulation.statedata_reporter}}
simulation.step({{simulation.prod_steps}})
print('Done')